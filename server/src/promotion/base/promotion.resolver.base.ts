/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePromotionArgs } from "./CreatePromotionArgs";
import { UpdatePromotionArgs } from "./UpdatePromotionArgs";
import { DeletePromotionArgs } from "./DeletePromotionArgs";
import { PromotionFindManyArgs } from "./PromotionFindManyArgs";
import { PromotionFindUniqueArgs } from "./PromotionFindUniqueArgs";
import { Promotion } from "./Promotion";
import { Discount } from "../../discount/base/Discount";
import { PromotionService } from "../promotion.service";

@graphql.Resolver(() => Promotion)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class PromotionResolverBase {
  constructor(
    protected readonly service: PromotionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Promotion",
    action: "read",
    possession: "any",
  })
  async _promotionsMeta(
    @graphql.Args() args: PromotionFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Promotion])
  @nestAccessControl.UseRoles({
    resource: "Promotion",
    action: "read",
    possession: "any",
  })
  async promotions(
    @graphql.Args() args: PromotionFindManyArgs
  ): Promise<Promotion[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Promotion, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Promotion",
    action: "read",
    possession: "own",
  })
  async promotion(
    @graphql.Args() args: PromotionFindUniqueArgs
  ): Promise<Promotion | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Promotion)
  @nestAccessControl.UseRoles({
    resource: "Promotion",
    action: "create",
    possession: "any",
  })
  async createPromotion(
    @graphql.Args() args: CreatePromotionArgs
  ): Promise<Promotion> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        discount: args.data.discount
          ? {
              connect: args.data.discount,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Promotion)
  @nestAccessControl.UseRoles({
    resource: "Promotion",
    action: "update",
    possession: "any",
  })
  async updatePromotion(
    @graphql.Args() args: UpdatePromotionArgs
  ): Promise<Promotion | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          discount: args.data.discount
            ? {
                connect: args.data.discount,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Promotion)
  @nestAccessControl.UseRoles({
    resource: "Promotion",
    action: "delete",
    possession: "any",
  })
  async deletePromotion(
    @graphql.Args() args: DeletePromotionArgs
  ): Promise<Promotion | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Discount, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Discount",
    action: "read",
    possession: "any",
  })
  async discount(
    @graphql.Parent() parent: Promotion
  ): Promise<Discount | null> {
    const result = await this.service.getDiscount(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
