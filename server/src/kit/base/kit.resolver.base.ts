/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateKitArgs } from "./CreateKitArgs";
import { UpdateKitArgs } from "./UpdateKitArgs";
import { DeleteKitArgs } from "./DeleteKitArgs";
import { KitFindManyArgs } from "./KitFindManyArgs";
import { KitFindUniqueArgs } from "./KitFindUniqueArgs";
import { Kit } from "./Kit";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { KitService } from "../kit.service";

@graphql.Resolver(() => Kit)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class KitResolverBase {
  constructor(
    protected readonly service: KitService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Kit",
    action: "read",
    possession: "any",
  })
  async _kitsMeta(
    @graphql.Args() args: KitFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Kit])
  @nestAccessControl.UseRoles({
    resource: "Kit",
    action: "read",
    possession: "any",
  })
  async kits(@graphql.Args() args: KitFindManyArgs): Promise<Kit[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Kit, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Kit",
    action: "read",
    possession: "own",
  })
  async kit(@graphql.Args() args: KitFindUniqueArgs): Promise<Kit | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Kit)
  @nestAccessControl.UseRoles({
    resource: "Kit",
    action: "create",
    possession: "any",
  })
  async createKit(@graphql.Args() args: CreateKitArgs): Promise<Kit> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Kit)
  @nestAccessControl.UseRoles({
    resource: "Kit",
    action: "update",
    possession: "any",
  })
  async updateKit(@graphql.Args() args: UpdateKitArgs): Promise<Kit | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Kit)
  @nestAccessControl.UseRoles({
    resource: "Kit",
    action: "delete",
    possession: "any",
  })
  async deleteKit(@graphql.Args() args: DeleteKitArgs): Promise<Kit | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Product])
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async product(
    @graphql.Parent() parent: Kit,
    @graphql.Args() args: ProductFindManyArgs
  ): Promise<Product[]> {
    const results = await this.service.findProduct(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
